.Dd Oct 17, 2024
.Dt DWMGMK 3
.Os
.Sh NAME
.Nm dwm_gmk_init ,
.Nm dwm_bison ,
.Nm dwm_curpath ,
.Nm dwm_cwd ,
.Nm dwm_files ,
.Nm dwm_flex ,
.Nm dwm_fromtop ,
.Nm dwm_pwd ,
.Nm dwm_relpath ,
.Nm dwm_relpwd ,
.Nm dwm_rgxmatch ,
.Nm dwm_rgxreplace ,
.Nm dwm_rgxsearch ,
.Nm dwm_rgxsubst ,
.Nm dwm_settop ,
.Nm dwm_sort ,
.Nm dwm_subdirs ,
.Nm dwm_thisdir ,
.Nm dwm_thisdirabs ,
.Nm dwm_top ,
.Nm dwm_totop ,
.Nm dwm_uniqleft ,
.Nm dwm_uniqright
.Nd GNU make extensions
.Sh LIBRARY
.Lb dwm_gmk.so
.Sh SYNOPSIS
.Bd -literal
load /usr/local/lib/dwm_gmk.so(dwm_gmk_setup)

$(call dwm_gmk_init)
$(eval $(dwm_bison bison_source_file[,bison_args]))
$(dwm_curpath )
$(dwm_cwd )
$(dwm_files directory_path,regexp)
$(eval $(dwm_flex flex_source_file[,flex_args]))
$(dwm_fromtop\ )                                                     
$(dwm_fromtop path)
$(dwm_pwd\ )
$(dwm_relpath from,to)
$(dwm_rgxmatch\ regexp,text)
$(dwm_rgxreplace\ regexp,format,text)
$(dwm_rgxsearch\ regexp,text)
$(dwm_rgxsubst\ regexp,format,text)
$(dwm_settop\ )
$(dwm_sort text)
$(dwm_subdirs\ )
$(dwm_thisdir\ )
$(dwm_thisdirabs\ )
$(dwm_top\ )
$(dwm_totop\ )
$(dwm_totop path)
$(dwm_uniqleft text)
$(dwm_uniqright text)
.Ed
.Sh DESCRIPTION
dwm_gmk.so contains a set of utility functions that can be loaded into
GNU make via its \fIload\fR directive.  Once loaded, these functions can
be used in the same manner as GNU make built-in functions.
.Ss dwm_gmk_init
Usage: $(call dwm_gmk_init)
.Pp
.Bd -filled
Saves the directory of the last included Makefile, so that it can later
be fetched with
.Sx dwm_thisdir .
Note this should be called \fBbefore\fR any \fIinclude\fR directive.  It
is normally called at the top of each Makefile.
.Ed
.Ss dwm_bison
Usage: $(eval $(dwm_bison bison_source_file[,bison_args]))
.Pp
Creates a rule to run
.Xr bison 1
on the given \fIbison_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -offset indent -compact

$(eval $(dwm_bison parse.y,-d))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -offset indent -compact

BISONTARGETS += parse.cc parse.hh
parse.cc parse.hh &: parse.y
	bison -d -oparse.cc $<
.Ed
.Pp
Note that we add to \fIBISONTARGETS\fR so that a 'clean' rule can use
it to remove files generated by bison.
.Ss dwm_curpath
Usage: $(dwm_curpath\ )
.Pp
Returns the current path, using std::filesystem::current_path() from
the standard C++ library (C++17 and later).  This is the same as the
result of
.Xr getcwd 3 from POSIX.
.Pp
Note that this is different than the result of
.Sx dwm_pwd ;
GNU make does not set the PWD environment variable when
invoked as 'make -C somedir ...'.
.Ss dwm_files
Usage: $(dwm_files directory_path,regexp)
.Pp
Returns a list of files contained in \fIdirectory_path\fR whose name
matches the regular expression \fIregexp\fR.  Note that \fIregexp\fR is
an ECMAScript regular expression.
.Ss dwm_flex
Usage: $(eval $(dwm_flex flex_source_file[,flex_args]))
.Pp
Creates a rule to run
.Xr flex 1
on the given \fIflex_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -offset indent -compact

$(eval $(dwm_flex lexer.lex,-o lexer.cc))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -offset indent -compact

FLEXTARGETS += lexer.cc
lexer.cc: lexer.lex
	flex -o lexer.cc $<
.Ed
.Pp
Note that we add to \fIFLEXTARGETS\fR so that a 'clean' rule can use
it to remove files generated by flex.
.Ss dwm_fromtop
.Bd -literal
Usage: $(dwm_fromtop\ )
USage: $(dwm_fromtop path)
.Be
.Pp
.Bd -filled -compact
Returns the relative path from the top level directory
of the project to \fIpath\fR.  The top level directory must be set
with 
.Sx dwm_settop
before using this function.
.Pp
With no \fIpath\fR argument, uses the directory of the most recently
read Makefile that called
.Sx dwm_gmk_init
which is equivalent to:
.Pp
.Dl $(dwm_fromtop $(dwm_thisdir ))
.Ed
.Ss dwm_pwd
Usage: $(dwm_pwd\ )
.Pp
Returns the value of the PWD environment variable.  Note that GNU make
does not modify PWD.  A recursive make using \fBmake -C ...\fR will not
change PWD.  Hence this function can be used to determine the working
directory from which the user ran GNU make.
.Ss dwm_relpath
Usage: $(dwm_relpath from,to)
.Ss dwm_rgxmatch
Usage: $(dwm_rgxmatch\ regexp,text)
.Pp
Example:
.Dl $(dwm_rgxmatch ^d(.+),dwm)
.Pp
would return:
.Dl dwm wm
.Ss dwm_rgxreplace
Usage: $(dwm_rgxreplace\ regexp,format,text)
Example:
.Dl $(dwm_rgxreplace a|e|i|o|u,[$$&],Quick brown fox)
would return:
.Dl Q[u][i]ck br[o]wn f[o]x
.Ss dwm_rgxsearch
Usage: $(dwm_rgxsearch\ regexp,text)
.Pp
Searches \fItext\fR for matches to the regular expression \fIregexp\fR.
Returns all matches as a space-separated list.
.Ss dwm_rgxsubst
Usage: $(dwm_rgxsubst\ regexp,format,text)
.Pp
Returns a string where each instance of the regular expression \fIregexp\fR
in each word of \fItest\fR is replaced with \fIformat\fR.  Note that
\fIregexp\fR is an ECMAScript regular expression.  Under the hood, this
function uses std::regex_replace() from the standard C++ library, executing
it on each word in \fItext\fR.
.Pp
Example:
.Dl $(dwm_rgxsubst (.+)\\.cc$$,$$1.o,foo.cc bar.cc foobar.cc))
.Pp
Would return:
.Dl foo.o bar.o foobar.o
.Ss dwm_relpwd
Usage: $(dwm_relpwd path)
.Ss dwm_settop
Usage: $(dwm_settop\ )
.Pp
Should be called once, from a file in the top level of the project.
This will set the top level directory, which can later be fetched with
.Sx dwm_top .
.Ss dwm_sort
Usage: $(dwm_sort text)
.Pp
Returns a sorted version of the words in \fItext\fR (lexicographical).
Unlike GNU make's built-in \fIsort\fR, does not remove duplicates.
.Pp
Example:
.Dl $(dwm_sort d c b a c b a b a b a)
.Pp
Would return:
.Dl a a a a b b b b c c d
.Ss dwm_subdirs
Usage: $(dwm_subdirs\ directory_path,regexp)
.Pp
Returns a list of subdirectories of \fIdirectory_path\fR whose name
matches the regular expression \fIregexp\fR.  Note that \fIregexp\fR is
an ECMAScript regular expression.
.Ss dwm_thisdir
Usage: $(dwm_thisdir\ )
.Bd -filled
Returns the directory in which the current Makefile lives, assuming
.Sx dwm_gmk_init
was called at the top of the Makefile before any \fIinclude\fR directives.
Note that the returned value is relative to the working directory
(as would be returned by
.Xr getcwd 3 from POSIX).
.Ed
.Ss dwm_thisdirabs
Usage: $(dwm_thisdirabs\ )
.Bd -filled
Returns the directory in which the current Makefile lives, assuming
.Sx dwm_gmk_init
was called at the top of the Makefile before any \fIinclude\fR directives.
Note that the returned value is an absolute path.
.Ed
.Ss dwm_top
Usage: $(dwm_top\ )
.Pp
.Bd -filled
Returns the top level directory of the project, which was set with
.Sx dwm_settop .
This is an absolute path.
.Ed
.Ss dwm_totop
Usage: $(dwm_totop\ )
Usage: $(dwm_totop path)
.Ss dwm_uniqleft
Usage: $(dwm_uniqleft text)
Returns a copy of \fItext\fR with rightmost duplicates removed (leftmost
retained).  Unlike GNU make's built-in \fIsort\fR, does not sort.  Useful
for removing duplicate complier and linker flags or filenames without
changing the order.
.Pp
Example:
.Dl $(dwm_uniqleft a b d d b a)
.Pp
Would return:
.Dl a b d
.Ss dwm_uniqright
Usage: $(dwm_uniqright text)
Returns a copy of \fItext\fR with leftmost duplicates removed (rightmost
retained).  Unlike GNU make's built-in \fIsort\fR, does not sort.  Useful
for removing duplicate complier and linker flags or filenames without
changing the order.
.Pp
Example:
.Dl $(dwm_uniqleft a b d d b a)
.Pp
Would return:
.Dl d b a
.Sh SEE ALSO
.Rs
See
.Lk https://en.cppreference.com/w/cpp/regex/ecmascript
for the details of the modified ECMAScript regular expression grammar.
.Re
.Rs
See
.Lk https://262.ecma-international.org/5.1/#sec-15.5.4.11
for information on ECMAScript backreferences.
.Re
.Rs
See
.Lk https://en.cppreference.com/w/cpp/regex/regex_replace
for inforomation on std::regex_replace() from the standard C++ library.
.Re
.Sh AUTHORS
.An Daniel W. McRobb
.Mt dwm@mcplex.net
