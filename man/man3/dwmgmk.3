.Dd Oct 17, 2024
.Dt DWMGMK 3
.Os
.Sh NAME
.Nm dwm_bison ,
.Nm dwm_curpath ,
.Nm dwm_cwd ,
.Nm dwm_files ,
.Nm dwm_flex ,
.Nm dwm_funcs ,
.Nm dwm_include ,
.Nm dwm_pwd ,
.Nm dwm_relpath ,
.Nm dwm_relpwd ,
.Nm dwm_reverse ,
.Nm dwm_rgxmatch ,
.Nm dwm_rgxreplace ,
.Nm dwm_rgxsearch ,
.Nm dwm_rgxsubst ,
.Nm dwm_rotl ,
.Nm dwm_rotr ,
.Nm dwm_sort ,
.Nm dwm_subdirs ,
.Nm dwm_thisdir ,
.Nm dwm_uniqleft ,
.Nm dwm_uniqright ,
.Nm dwm_my
.Nd GNU make extensions
.Sh LIBRARY
.Lb dwm_gmk.so
.Sh SYNOPSIS
.Bd -literal
load /usr/local/lib/dwm_gmk.so(dwm_gmk_setup)

$(eval $(dwm_bison bison_source_file[,bison_args]))
$(dwm_curpath )
$(dwm_cwd )
$(dwm_files directory_path,regexp)
$(eval $(dwm_flex flex_source_file[,flex_args]))
$(dwm_funcs\ )
$(dwm_include filename)
$(dwm_include verbose,filename)
$(dwm_my expression)
$(my expression)
$(myns name)
$(dwm_pwd\ )
$(dwm_relpath from,to)
$(dwm_reverse text)
$(dwm_rgxmatch\ regexp,text)
$(dwm_rgxreplace\ regexp,format,text)
$(dwm_rgxsearch\ regexp,text)
$(dwm_rgxsubst\ regexp,format,text)
$(dwm_rotl text)
$(dwm_rotr text)
$(dwm_sort text)
$(dwm_subdirs\ )
$(dwm_thisdir\ )
$(dwm_thisdirabs\ )
$(dwm_uniqleft text)
$(dwm_uniqright text)
.Ed
.Sh DESCRIPTION
dwm_gmk.so contains a set of utility functions that can be loaded into
GNU make via its \fIload\fR directive.  Once loaded, these functions can
be used in the same manner as GNU make built-in functions.
.Ss dwm_bison
.Bd
Usage: \fB$(eval $(dwm_bison bison_source_file[,bison_args]))\fR
.Ed
.Pp
Creates a rule to run
.Xr bison 1
on the given \fIbison_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -compact
\ 
   $(eval $(dwm_bison parse.y,-d))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -compact
\ 
   BISONTARGETS += parse.cc parse.hh
   parse.cc parse.hh &: parse.y
           bison -d -oparse.cc $<
.Ed
.Pp
Note that we add to \fIBISONTARGETS\fR so that a 'clean' rule can use
it to remove files generated by bison.
.Ss dwm_curpath
.Bd -literal
Usage: \fB$(dwm_curpath\ )\fR
.Ed
.Pp
Returns the current path, using std::filesystem::current_path() from
the standard C++ library (C++17 and later).  This is the same as the
result of
.Xr getcwd 3 from POSIX.
.Pp
Note that this is different than the result of
.Sx dwm_pwd ;
GNU make does not set the PWD environment variable when
invoked as 'make -C somedir ...'.
.Ss dwm_files
.Bd -literal
Usage: \fB$(dwm_files directory_path,regexp)\fR
.Ed
.Pp
Returns a list of files contained in \fIdirectory_path\fR whose name
matches the regular expression \fIregexp\fR.  Note that \fIregexp\fR is
an ECMAScript regular expression.
.Ss dwm_flex
.Bd -literal
Usage: \fB$(eval $(dwm_flex flex_source_file[,flex_args]))\fR
.Ed
.Pp
Creates a rule to run
.Xr flex 1
on the given \fIflex_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -compact
\ 
   $(eval $(dwm_flex lexer.lex,-o lexer.cc))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -compact
\ 
   FLEXTARGETS += lexer.cc
   lexer.cc: lexer.lex
           flex -o lexer.cc $<
.Ed
.Pp
Note that we add to
.Ql FLEXTARGETS
so that a
.Ql clean
rule can use it to remove files generated by flex.
.Ss dwm_include
.Bd -literal
Usage: \fB$(dwm_include files...)\fR
Usage: \fB$(dwm_include verbose,files...)\fR
.Ed
.Pp
.Bd -filled
Similar to GNU make's built-in \fIinclude\fR directive, but will push
each included file onto an internal stack while it is being processed and
pop it from the stack when done.  This allows
.Sx dwm_thisdir
to continue to work correctly after including a file.
.Ed
.Pp
.Bd -filled
In the second form,
.Sx dwm_include
will print a line showing which file is being included.  This can be
useful when trying to reduce duplicate inclusions.
.Ed
.Bd -filled
The internal stack of Makefiles maintained by
.Sx dwm_include
can be accessed via the \fIdwm_incstack\fR variable, with the current
Makefile (the one being processed) being:
.Ed
.Bd -literal
\ 
   $(firstword $(dwm_incstack))
.Ed
.Ss dwm_my
.Bd -literal
Usage: \fB$(dwm_my varname)\fR
Usage: \fB$(dwm_my varname := value)\fR
Usage: \fB$(dwm_my varname = value)\fR
.Ed
.Pp
The intent of \fIdwm_my\fR is to set or get variable values from a namespace
that is separate from the global GNU make namespace.  This allows one to
create variables that do not conflict with global variables despite sharing
the same name.  Such variables are ony accessible using \fIdwm_my\fR.
.Pp
\fIvarname\fR can be fully qualified by using the form \fInamespace.varname\fR.
For example:
.Bd -literal
\ 
   $(dwm_my lib.srcs := foo.c bar.c orange.c)
   $(dwm_my lib.objs := $(patsubst %.c,%.o,$(dwm_my lib.srcs)))
   libfoo.a: $(dwm_my lib.objs)
           ar rv $@ $^
.Ed
.Bd -filled
If \fIvarname\fR is not fully qualified, the last namespace set with
.Sx dwm_myns
will be used as the namespace.
.Ed
.Ss dwm_myns
.Bd -literal
Usage: \fB($dwm_myns namespace)\fR
.Ed
.Pp
.Bd -filled
Sets the current namespace used by
.Sx dwm_my .
.Ed
.Ss dwm_pwd
.Bd -literal
Usage: \fB$(dwm_pwd\ )\fR
.Ed
.Pp
Returns the value of the PWD environment variable.  Note that GNU make
does not modify PWD.  A recursive make using \fBmake -C ...\fR will not
change PWD.  Hence this function can be used to determine the working
directory from which the user ran GNU make.
.Ss dwm_relpath
.Bd -literal
Usage: \fB$(dwm_relpath from,to)\fR
.Ed
.Ss dwm_rgxmatch
.Bd -literal
Usage: \fB$(dwm_rgxmatch\ regexp,text)\fR
.Ed
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_rgxmatch ^d(.+),dwm)\fR
   \(rA dwm wm
.Ed
.Ss dwm_rgxreplace
.Bd -literal
Usage: \fB$(dwm_rgxreplace\ regexp,format,text)\fR
.Ed
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_rgxreplace a|e|i|o|u,[$$&],Quick brown fox)\fR
   \(rA Q[u][i]ck br[o]wn f[o]x
.Ed
.Ss dwm_rgxsearch
.Bd -literal
Usage: \fB$(dwm_rgxsearch\ regexp,text)\fR
.Ed
.Pp
Searches \fItext\fR for matches to the regular expression \fIregexp\fR.
Returns all matches as a space-separated list.
.Ss dwm_rgxsubst
.Bd -literal
Usage: \fB$(dwm_rgxsubst\ regexp,format,text)\fR
.Ed
Returns a string where each instance of the regular expression \fIregexp\fR
in each word of \fItest\fR is replaced with \fIformat\fR.  Note that
\fIregexp\fR is an ECMAScript regular expression.  Under the hood, this
function uses std::regex_replace() from the standard C++ library,
executing it on each word in \fItext\fR.  Note that the escaped '$1' is
due to the C++ library using '$' instead of '\\' for backreferences.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_rgxsubst (.+)\\.cc$$,$$1.o,foo.cc bar.cc foobar.cc))\fR
   \(rA foo.o bar.o foobar.o
.Ed
.Ss dwm_relpwd
.Bd -literal
Usage: \fB$(dwm_relpwd path)\fR
.Ed
.Ss dwm_reverse
.Bd -literal
Usage: \fB$(dwm_reverse text)\fR
.Ed
.Pp
Returns the words in \fItext\fR in reverse order.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_reverse cat dog cow horse hen)\fR
   \(rA hen horse cow dog cat
.Ed
.Ss dwm_rotl
Usage: \fB$(dwm_rotl text[,count])\fR
.Pp
Returns the words in \fItext\fR rotated to the left \fIcount\fR positions.  If
\fIcount\fR is not given, 1 will be used.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_rotl cat dog cow horse hen,3)\fR
   \(rA horse hen cat dog cow
.Ed
.Ss dwm_rotr
.Bd -literal
Usage: \fB$(dwm_rotr text[,positions])\fR
.Ed
Returns the words in \fItext\fR rotated to the right \fIcount\fR positions.
If \fIcount\fR is not given, 1 will be used.
.Pp
Example:
.Bd -literal -compact 
   \fB$(dwm_rotr cat dog cow horse hen,3)\fR
   \(rA cow horse hen cat dog
.Ed
.Ss dwm_sort
.Bd -literal
Usage: \fB$(dwm_sort text)\fR
.Ed
.Pp
Returns a sorted version of the words in \fItext\fR (lexicographical).
Unlike GNU make's built-in \fIsort\fR, does not remove duplicates.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_sort d c b a c b a b a b a)\fR
   \(rA a a a a b b b b c c d
.Ed
.Ss dwm_subdirs
.Bd -literal
Usage: \fB$(dwm_subdirs\ directory_path,regexp)\fR
.Ed
.Pp
Returns a list of subdirectories of \fIdirectory_path\fR whose name
matches the regular expression \fIregexp\fR.  Note that \fIregexp\fR is
an ECMAScript regular expression.
.Ss dwm_thisdir
.Bd -literal
Usage: \fB$(dwm_thisdir\ )\fR
.Ed
.Bd -filled
Returns the directory in which the current Makefile lives, assuming
it is called at the top of the Makefile before any \fIinclude\fR directives
or that
.Sx dwm_include
is always used in place of \fIinclude\fR.  Note that the returned value is
relative to the working directory (as would be returned by
.Xr getcwd 3
from POSIX).
.Ed
.Ss dwm_thisdirabs
.Bd -literal
Usage: \fB$(dwm_thisdirabs\ )\fR
.Ed
.Bd -filled
Returns the directory in which the current Makefile lives, assuming
it is called at the top of the Makefile before any \fIinclude\fR directives
or that
.Sx dwm_include
is always used instead of \fIinclude\fR.  The returned value is an
absolute path.
.Ed
.Ss dwm_uniqleft
.Bd -literal
Usage: \fB$(dwm_uniqleft text)\fR
.Ed
Returns a copy of \fItext\fR with rightmost duplicates removed (leftmost
retained).  Unlike GNU make's built-in \fIsort\fR, does not sort.  Useful
for removing duplicate complier and linker flags or filenames without
changing the order.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_uniqleft a b d d b a)\fR
   \(rA a b d
.Ed
.Ss dwm_uniqright
.Bd -literal
Usage: \fB$(dwm_uniqright text)\fR
.Ed
Returns a copy of \fItext\fR with leftmost duplicates removed (rightmost
retained).  Unlike GNU make's built-in \fIsort\fR, does not sort.  Useful
for removing duplicate compiler and linker flags or filenames without
changing the order.
.Pp
Example:
.Bd -literal -compact
   \fB$(dwm_uniqleft a b d d b a)\fR
   \(rA d b a
.Ed
.Sh SEE ALSO
.Rs
See
.Lk https://en.cppreference.com/w/cpp/regex/ecmascript
for the details of the modified ECMAScript regular expression grammar.
.Re
.Rs
See
.Lk https://262.ecma-international.org/5.1/#sec-15.5.4.11
for information on ECMAScript backreferences.
.Re
.Rs
See
.Lk https://en.cppreference.com/w/cpp/regex/regex_replace
for inforomation on std::regex_replace() from the standard C++ library.
.Re
.Sh AUTHORS
.An Daniel W. McRobb
.Mt dwm@mcplex.net
