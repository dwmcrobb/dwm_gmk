.Dd Oct 17, 2024
.Dt DWMGMK 3
.Os
.Sh NAME
.Nm dwm_gmk_init,
.Nm dwm_bison,
.Nm dwm_curpath,
.Nm dwm_cwd,
.Nm dwm_dirfiles,
.Nm dwm_flex,
.Nm dwm_fromtop,
.Nm dwm_pwd,
.Nm dwm_relpath,
.Nm dwm_relpwd,
.Nm dwm_rgxmatch,
.Nm dwm_rgxreplace,
.Nm dwm_rgxsearch,
.Nm dwm_rgxsubst,
.Nm dwm_settop,
.Nm dwm_subdirs,
.Nm dwm_thisdir,
.Nm dwm_top,
.Nm dwm_totop,
.Nm dwm_uniqsort
.Nd GNU make extensions
.Sh LIBRARY
.Lb dwm_gmk.so
.Sh SYNOPSIS
.Bd -literal
load /usr/local/lib/dwm_gmk.so(dwm_gmk_setup)

$(call dwm_gmk_init)
$(eval $(dwm_bison bison_source_file[,bison_args]))
$(dwm_curpath )
$(dwm_cwd )
$(dwm_dirfiles directory_path,regexp)
$(eval $(dwm_flex flex_source_file[,flex_args]))
$(dwm_fromtop\ )                                                     
$(dwm_fromtop path)
$(dwm_pwd\ )
$(dwm_relpath from,to)
$(dwm_rgxmatch\ string,regexp)
$(dwm_rgxreplace\ string,regexp,format)
$(dwm_rgxsearch\ string,regexp)
$(dwm_rgxsubst\ regexp,format,text)
$(dwm_settop\ )
$(dwm_subdirs\ )
$(dwm_thisdir\ )
$(dwm_top\ )
$(dwm_totop\ )
$(dwm_totop path)
$(dwm_uniqsort words)
.Ed
.Sh DESCRIPTION
dwm_gmk.so contains a set of utility functions that can be loaded into
GNU make via its \fIload\fR directive.  Once loaded, these functions can
be used in the same manner as GNU make built-in functions.
.Ss dwm_gmk_init
.Dl Usage: $(call dwm_gmk_init)
.Ss dwm_bison
.Dl Usage: $(eval $(dwm_bison bison_source_file[,bison_args]))
.Pp
Creates a rule to run
.Xr bison 1
on the given \fIbison_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -offset indent -compact

$(eval $(dwm_bison parse.y,-d))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -offset indent -compact

BISONTARGETS += parse.cc parse.hh
parse.cc parse.hh &: parse.y
	bison -d -oparse.cc $<
.Ed
.Pp
Note that we add to \fIBISONTARGETS\fR so that a 'clean' rule can use
it to remove files generated by bison.
.Ss dwm_curpath
.Dl Usage: $(dwm_curpath\ )
.Pp
Returns the current path, using std::filesystem::current_path() from
the standard C++ library (C++17 and later).  This is the same as the
result of
.Xr getcwd 3 from POSIX.
.Pp
Note that this is different than the result of
.Sx dwm_pwd ;
GNU make does not set the PWD environment variable when
invoked as 'make -C somedir ...'.
.Ss dwm_dirfiles
.Dl Usage: $(dwm_dirfiles directory_path,regexp)
.Ss dwm_flex
.Dl Usage: $(eval $(dwm_flex flex_source_file[,flex_args]))
.Pp
Creates a rule to run
.Xr flex 1
on the given \fIflex_source_file\fR.  For example, if you add this line
to a Makefile:
.Bd -literal -offset indent -compact

$(eval $(dwm_flex lexer.lex,-o lexer.cc))

.Ed
The following will be generated and evaluated by GNU make:
.Bd -literal -offset indent -compact

FLEXTARGETS += lexer.cc
lexer.cc: lexer.lex
	flex -o lexer.cc $<
.Ed
.Pp
Note that we add to \fIFLEXTARGETS\fR so that a 'clean' rule can use
it to remove files generated by flex.
.Ss dwm_fromtop
.Dl Usage: $(dwm_fromtop\ )
.Dl Usage: $(dwm_fromtop path)
.Ss dwm_pwd
.Dl Usage: $(dwm_pwd\ )
.Ss dwm_relpath
.Dl Usage: $(dwm_relpath from,to)
.Ss dwm_rgxmatch
.Dl Usage: $(dwm_rgxmatch\ string,regexp)
.Ss dwm_rgxreplace
.Dl Usage: $(dwm_rgxreplace\ string,regexp,format)
.Ss dwm_rgxsearch
.Dl Usage: $(dwm_rgxsearch\ string,regexp)
.Ss dwm_rgxsubst
.Dl Usage: $(dwm_rgxsubst\ regexp,format,text)
.Ss dwm_relpwd
.Dl Usage: $(dwm_relpwd path)
.Ss dwm_settop
.Dl Usage: $(dwm_settop\ )

Should be called once, from a file in the top level of the project.
This will set the top level directory, which can later be fetched with
.Sx dwm_top .
.Ss dwm_subdirs
.Dl Usage: $(dwm_subdirs\ directory_path,regexp)
.Ss dwm_thisdir
.Dl $(dwm_thisdir\ )
.Ss dwm_top
.Dl $(dwm_top\ )
.Ss dwm_totop
.Dl $(dwm_totop\ )
.Dl $(dwm_totop path)
.Ss dwm_uniqsort
.Dl $(dwm_uniqsort words)
